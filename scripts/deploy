#!/usr/bin/env bash

if [ "$TRAVIS_PULL_REQUEST" != "false" ]; then
	echo -e "\n============= No deployment for Travis PR builds, skip."
	exit 0
fi

# deploy script directory to anchor where to call deployment
DIR=$(dirname "${BASH_SOURCE[0]}")

cd "$DIR/.."

# retrieve information from local git
BRANCH=${TRAVIS_PULL_REQUEST_BRANCH:-${TRAVIS_BRANCH:-$(git rev-parse --abbrev-ref HEAD)}}
SERVICE_VER=${TRAVIS_PULL_REQUEST_SHA:-${TRAVIS_COMMIT:-$(git rev-parse --short HEAD)}}
SERVICE_VER=$(git rev-parse --short ${SERVICE_VER}) # get the short hash

# determine stage based on git branch being deployed
ENV_PRE="DEV"
if [ $BRANCH = "master" ] || [[ $BRANCH =~ ^dev-[a-zA-Z0-9]+$ ]] ; then
	STAGE="dev"
elif [[ $BRANCH =~ ^prod-[a-zA-Z0-9]+$ ]] ; then
	STAGE="prod"
	ENV_PRE="PROD"
else
	# TODO: deploy dynamic stages
	# STAGE=${BRANCH//[^a-zA-Z0-9]/}
	# For now: simply skip deployment
	echo -e "\n============= ${BRANCH} is a non-deployment branch, skip."
	exit 0
fi

echo -e "\n============= Deploying branch: ${BRANCH} (${SERVICE_VER}) to stage: ${STAGE}..."

# scope env-var vars based on branch/stage
JWT_SECRET="${ENV_PRE}_JWT_SECRET"

# deploy with branch/stage specific env vars
DEPLOY_RES=$(JWT_SECRET=${!JWT_SECRET} MONGO_URI=${MONGO_URI} MONGO_USER_DB=${MONGO_USER_DB} MONGO_USER_COLL=${MONGO_USER_COLL} OTP_TTL=${OTP_TTL} KEYWARDEN_VER=${SERVICE_VER} bash -c "sls deploy --stage ${STAGE}")

# assign deployment exit code
DEPLOY_EXIT=$?

# slack message
BUILD_LINK="https://travis-ci.com/EQWorks/keywarden/builds/${TRAVIS_BUILD_ID}"
BRANCH_LINK="https://github.com/EQWorks/keywarden/tree/${BRANCH}"
COMMIT_LINK="https://github.com/EQWorks/keywarden/commit/${SERVICE_VER}"
if [ $DEPLOY_EXIT -eq 0 ] || [[ $DEPLOY_RES = *"Too Many Requests"* ]]; then
	SLACK_COLOR='good'
	SLACK_STATUS='succeeded'
	SLACK_TITLE="View the changes live (${STAGE})"
	SLACK_LINK="https://api.eqworks.io/${STAGE}"
	SLACK_TEXT="See <${BUILD_LINK}|build log> | branch <${BRANCH_LINK}|${BRANCH}> | commit <${COMMIT_LINK}|${SERVICE_VER}>"
else
	SLACK_COLOR='danger'
	SLACK_STATUS='failed'
	SLACK_TITLE="Build log"
	SLACK_LINK="$BUILD_LINK"
	SLACK_TEXT="branch <${BRANCH_LINK}|${BRANCH}> | commit <${COMMIT_LINK}|${SERVICE_VER}>"
	echo "${DEPLOY_RES}"
fi
SLACK_PRETEXT="Deployment to keywarden (${STAGE}) ${SLACK_STATUS}"
SLACK_TS="$(date +%s)"
SLACK_DATA='{"attachments":[{"fallback":"'${SLACK_PRETEXT}'","color":"'${SLACK_COLOR}'","pretext":"'${SLACK_PRETEXT}'","title":"'${SLACK_TITLE}'","title_link":"'${SLACK_LINK}'","text":"'${SLACK_TEXT}'","ts":"'${SLACK_TS}'"}]}'

echo "Slack payload: ${SLACK_DATA}"

curl -X POST -H 'Content-type: application/json' --data "$SLACK_DATA" "$SLACK_WEBHOOK" || true # suppress slack error
