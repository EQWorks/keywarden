service: keywarden

plugins:
  - serverless-domain-manager

custom:
  # CORS allowed headers
  allowedHeaders:
    - Content-Type
    - X-Amz-Date
    - Authorization
    - X-Api-Key
    - X-Amz-Security-Token
    - X-Amz-User-Agent
    - eq-api-user
    - eq-api-jwt
  customDomain:
    domainName: 'auth.eqworks.io'
    basePath: '${opt:stage, self:provider.stage}'
    stage: '${opt:stage, self:provider.stage}'
    certificateName: '*.eqworks.io'
    createRoute53Record: true

provider:
  name: aws
  runtime: nodejs12.x
  timeout: 29
  memorySize: 256
  versionFunctions: false
  environment:
    JWT_SECRET: ${env:JWT_SECRET}
    README_LOCUS_SECRET: ${env:README_LOCUS_SECRET}
    SENTRY_URL: ${env:SENTRY_URL}
    PGHOST: ${env:PGHOST}
    PGHOST_READ: ${env:PGHOST_READ}
    PGDATABASE: ${env:PGDATABASE}
    PGUSER: ${env:PGUSER}
    PGPASSWORD: ${env:PGPASSWORD}
    PGAPPNAME: ${self:service}-${opt:stage, self:provider.stage}
    OTP_TTL: ${env:OTP_TTL}
    KEYWARDEN_VER: ${env:KEYWARDEN_VER}
    STAGE: ${opt:stage, self:provider.stage}
    REDIS_URI:
      # cloudformation functions to form redis://<host>:<port>
      "Fn::Join": [
        "",
        [
          "redis://",
          "Fn::Join": [
            ":",
            [
              "Fn::GetAtt": [KeywardenRedisCluster, RedisEndpoint.Address],
              "Fn::GetAtt": [KeywardenRedisCluster, RedisEndpoint.Port]
            ]
          ]
        ]
      ]
  vpc: # vpc-70658509 | EQ-DC-Tunnel
    securityGroupIds:
      - sg-081b437d # api-gateway-dc
    subnetIds:
      - subnet-b59ae9fe # EQ-DC-Lambda Public 1A
      - subnet-df12bb82 # EQ-DC-Lambda Public 1B
  iamRoleStatements:
    - Effect: Allow
      Action:
        - ses:SendEmail
        - ses:SendRawEmail
      Resource: arn:aws:ses:us-east-1:175398475102:*

functions:
  app:
    handler: app.handler
    events:
      - http:
          path: /
          method: ANY
          cors:
            origin: '*'
            headers: ${self:custom.allowedHeaders}
      - http:
          path: '{proxy+}'
          method: ANY
          cors:
            origin: '*'
            headers: ${self:custom.allowedHeaders}
  authorizer:
    handler: authorizer/index.handler

resources:
  Resources:
    # redis resource configured through cloudformation, without explicit manual work
    KeywardenRedisCluster:
      Type: AWS::ElastiCache::CacheCluster
      Properties:
        ClusterName: ${self:service}-${opt:stage, self:provider.stage}
        AutoMinorVersionUpgrade: true
        CacheNodeType: cache.t2.micro
        Engine: redis
        NumCacheNodes: 1
        # this equates to the provider.vpc.subnetIds
        CacheSubnetGroupName: redis-public-lambda
        VpcSecurityGroupIds:
          - sg-52345126
